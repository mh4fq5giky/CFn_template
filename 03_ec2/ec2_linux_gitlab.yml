AWSTemplateFormatVersion: 2010-09-09
Description: This template creates an EC2 instance with Amazon Linux 2023.

# =======================================
# Metadata
# =======================================
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Common Configuration"
        Parameters:
          - PJPrefix
          - Environment
          - ServerKind
      - Label:
          default: "Network Configuration"
        Parameters:
          - SelectSubnet
          - AssignElasticIP
      - Label:
          default: "EC2 Configuration"
        Parameters:
          - AMIId
          - ExistingSecurityGroupId
          - UserId
      - Label:
          default: "Connection Method Configuration"
        Parameters:
          - UseSSM
          - UseEIC

# =======================================
# Parameters
# =======================================
Parameters:
  PJPrefix:
    Type: String
    Default: testprefix
    MinLength: 1
    MaxLength: 12
    AllowedPattern: "[a-z0-9]+"
    Description: "Project prefix, consisting of lowercase letters and numbers."
    ConstraintDescription: "Must contain only lowercase letters and numbers."

  Environment:
    Type: String
    Default: dev
    AllowedValues: [ dev, stg, prd ]
    Description: "Deployment environment (dev, stg, or prd)."

  ServerKind:
    Type: String
    Default: ""
    ConstraintDescription: "Server kind is required."

  SelectSubnet:
    Type: String
    Default: PublicSubnet1
    AllowedValues: [ PublicSubnet1, PublicSubnet2, PublicSubnet3, PrivateSubnet1, PrivateSubnet2, PrivateSubnet3 ]

  AssignElasticIP:
    Type: String
    Default: false
    AllowedValues: [ true, false ]
    Description: "Specify whether to assign an Elastic IP (true/false)"

  ExistingSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Default: ""
    Description: "Specify an existing Security Group ID to associate with the EC2 instance. Leave blank to skip."

  AMIId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
    Description: "The Amazon Machine Image (AMI) ID for the EC2 instance. Use an appropriate AMI ID for your application environment."

  UserId:
    Type: String
    Default: sysadmin
    Description: 'The user ID to be created on the EC2 instance. This will replace the default "ec2-user" account.'

  UseSSM:
    Type: String
    Default: false
    AllowedValues: [ true, false ]
    Description: "Whether to use SSM for instance connection."

  UseEIC:
    Type: String
    Default: false
    AllowedValues: [ true, false ]
    Description: "Whether to use EC2 Instance Connect for instance connection."

# =======================================
# Mappings
# =======================================
Mappings:
  EC2:
    dev:
      InstanceType: t3.micro
      EBSVolumeType: gp3
      EBSRootVolumeSize: 20
    stg:
      InstanceType: t3.micro
      EBSVolumeType: gp3
      EBSRootVolumeSize: 30
    prd:
      InstanceType: t3.micro
      EBSVolumeType: gp3
      EBSRootVolumeSize: 30

# =======================================
# Condition
# =======================================
Conditions:
  IsPublicSubnet1Selected: !Equals [ !Ref SelectSubnet, PublicSubnet1 ]
  IsPublicSubnet2Selected: !Equals [ !Ref SelectSubnet, PublicSubnet2 ]
  IsPublicSubnet3Selected: !Equals [ !Ref SelectSubnet, PublicSubnet3 ]
  IsPrivateSubnet1Selected: !Equals [ !Ref SelectSubnet, PrivateSubnet1 ]
  IsPrivateSubnet2Selected: !Equals [ !Ref SelectSubnet, PrivateSubnet2 ]
  IsPrivateSubnet3Selected: !Equals [ !Ref SelectSubnet, PrivateSubnet3 ]
  AssignEIPCondition: !And 
    - !Equals [ !Ref AssignElasticIP, true ]
    - !Or [ !Condition IsPublicSubnet1Selected, !Condition IsPublicSubnet2Selected, !Condition IsPublicSubnet3Selected ]
  IsExistingSGSpecified: !Not [ !Equals [!Ref ExistingSecurityGroupId, "" ]]
  IsUseSSM: !Equals [ !Ref UseSSM, true ]
  IsUseEIC: !Equals [ !Ref UseEIC, true ]

# =======================================
# Resources
# =======================================
Resources:

  # -------------------------------------
  # Key Pair
  # -------------------------------------
  KeyPair:
    Type: "AWS::EC2::KeyPair"
    Properties:
      KeyName: !Sub "${PJPrefix}-${Environment}-${ServerKind}-key"
      Tags:
        - Key: Name
          Value: !Sub "${PJPrefix}-${Environment}-${ServerKind}-key"
        - Key: PJName
          Value: !Ref PJPrefix

  # -------------------------------------
  # IAM Role for EC2
  # -------------------------------------
  IAMRoleForEC2:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${PJPrefix}-${Environment}-${ServerKind}-ec2-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
                - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - !If
          - IsUseSSM
          - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
          - !Ref "AWS::NoValue"
        - !If
          - IsUseSSM
          - arn:aws:iam::aws:policy/AmazonSSMPatchAssociation
          - !Ref "AWS::NoValue"

  InstanceProfileForEC2:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: !Sub "${PJPrefix}-${Environment}-${ServerKind}-instance-profile"
      Roles: 
        - !Ref IAMRoleForEC2

  # -------------------------------------
  # Security Group
  # -------------------------------------
  SecurityGroupForEC2:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: !Sub "${PJPrefix}-${Environment}-ec2default-sg"
      VpcId: { "Fn::ImportValue": { "Fn::Sub": "${PJPrefix}-${Environment}-vpc" }}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref "AWS::NoValue"
        - !If
          - IsUseEIC
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            SourceSecurityGroupId: !Ref EICSecurityGroup
          - !Ref "AWS::NoValue"
      Tags:
        - Key: Name
          Value: !Sub "${PJPrefix}-${Environment}-ec2default-sg"
        - Key: PJName
          Value: !Ref PJPrefix

  # -------------------------------------
  # EIC SecurityGroup
  # -------------------------------------
  EICSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Condition: IsUseEIC
    Properties:
      GroupDescription: !Sub "${PJPrefix}-${Environment}-eic-sg"
      VpcId: { "Fn::ImportValue": { "Fn::Sub": "${PJPrefix}-${Environment}-vpc" }}
      Tags:
        - Key: Name
          Value: !Sub "${PJPrefix}-${Environment}-eic-sg"
        - Key: PJName
          Value: !Ref PJPrefix

  EICEndpoint:
    Type: "AWS::EC2::InstanceConnectEndpoint"
    Condition: IsUseEIC
    Properties: 
      SecurityGroupIds: 
        - !Ref EICSecurityGroup
      SubnetId: { "Fn::ImportValue": { "Fn::Sub": "${PJPrefix}-${Environment}-Public-Subnet1" }}

  # -------------------------------------
  # Elastic IP
  # -------------------------------------
  EIPForEC2:
    Type: "AWS::EC2::EIP"
    Condition: AssignEIPCondition
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${PJPrefix}-${Environment}-${ServerKind}-eip"
        - Key: PJName
          Value: !Ref PJPrefix

  EIPAssociationForEC2:
    Type: "AWS::EC2::EIPAssociation"
    Condition: AssignEIPCondition
    Properties:
      AllocationId: !GetAtt EIPForEC2.AllocationId
      InstanceId: !Ref EC2Instance

  # -------------------------------------
  # ENI for EC2
  # -------------------------------------
  ENIForEC2:
    Type: "AWS::EC2::NetworkInterface"
    Properties:
      Description: !Sub "${PJPrefix}-${Environment}-${ServerKind}"
      SourceDestCheck: false
      GroupSet:
        - !Ref SecurityGroupForEC2
        - !If
          - IsExistingSGSpecified
          - !Ref ExistingSecurityGroupId
          - !Ref "AWS::NoValue"
      SubnetId: !If
        - IsPrivateSubnet1Selected
        - { "Fn::ImportValue": { "Fn::Sub": "${PJPrefix}-${Environment}-Private-Subnet1" }}
        - !If
          - IsPrivateSubnet2Selected
          - { "Fn::ImportValue": { "Fn::Sub": "${PJPrefix}-${Environment}-Private-Subnet2" }}
          - !If
            - IsPrivateSubnet3Selected
            - { "Fn::ImportValue": { "Fn::Sub": "${PJPrefix}-${Environment}-Private-Subnet3" }}
            - !If
              - IsPublicSubnet1Selected
              - { "Fn::ImportValue": { "Fn::Sub": "${PJPrefix}-${Environment}-Public-Subnet1" }}
              - !If
                - IsPublicSubnet2Selected
                - { "Fn::ImportValue": { "Fn::Sub": "${PJPrefix}-${Environment}-Public-Subnet2" }}
                - { "Fn::ImportValue": { "Fn::Sub": "${PJPrefix}-${Environment}-Public-Subnet3" }}
      Tags:
        - Key: Name
          Value: !Sub "${PJPrefix}-${Environment}-${ServerKind}-eni"
        - Key: PJName
          Value: !Ref PJPrefix

  # -------------------------------------
  # EC2
  # -------------------------------------
  EC2Instance: 
    Type: "AWS::EC2::Instance"
    Properties: 
      ImageId: !Ref AMIId
      InstanceType: !FindInMap [ EC2, !Ref Environment, InstanceType ]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: !FindInMap [ EC2, !Ref Environment, EBSVolumeType ]
            VolumeSize: !FindInMap [ EC2, !Ref Environment, EBSRootVolumeSize ]
            DeleteOnTermination: true
      IamInstanceProfile: !Ref InstanceProfileForEC2
      InstanceInitiatedShutdownBehavior: stop
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref ENIForEC2
          DeviceIndex: 0
      KeyName: !Ref KeyPair
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash

              # Create a new user account
              useradd ${UserId}
              cat /etc/passwd | grep ${UserId}
              echo "${UserId} ALL=(ALL) NOPASSWD:ALL" | tee --append /etc/sudoers.d/90-cloud-init-users

              # Grant administrative privileges to the user account
              usermod -aG wheel ${UserId}
              cat /etc/group | grep wheel

              # Copy the public key from ec2-user and adjust permissions (reuse the key)
              cp -R /home/ec2-user/.ssh /home/${UserId}
              chown -R ${UserId}:${UserId} /home/${UserId}/.ssh
              chmod 700 /home/${UserId}/.ssh
              chmod 600 /home/${UserId}/.ssh/*
              ls -la /home/${UserId}/.ssh

              # Disable/Delete the ec2-user account
              echo "DenyUsers ec2-user" | tee --append /etc/ssh/sshd_config
              systemctl restart sshd

              # Create a swap space and make it persistent after reboot.
              dd if=/dev/zero of=/swapfile bs=1M count=2048 status=progress
              chmod 600 /swapfile
              mkswap /swapfile
              swapon /swapfile
              echo "/swapfile none swap sw 0 0" | sudo tee -a /etc/fstab

              sysctl vm.swappiness=10
              sed -i 's/^vm.swappiness=.*/vm.swappiness=10/' /etc/sysctl.conf
              sysctl -p

              # Update all installed packages to the latest versions
              dnf -y update

              # Set the system timezone to Asia/Tokyo
              timedatectl set-timezone Asia/Tokyo

              # Set the system locale to Japanese (UTF-8)
              localectl set-locale LANG=ja_JP.UTF-8
              source /etc/locale.conf

              # Install and enable the rsyslog service for system logging
              dnf -y install rsyslog
              systemctl enable rsyslog
              systemctl start rsyslog

              # Install and enable the cloudwatch service for scheduled tasks
              dnf -y install amazon-cloudwatch-agent
              dnf -y install collectd

              # Install GitLab
              #dnf install -y policycoreutils-python-utils openssh-server openssh-clients perl
              #curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash
              #sudo EXTERNAL_URL="http://gitlab.example.com" dnf install -y gitlab-ce

              # Replace existing 'puma['worker_processes']' configuration with the desired value
              #sed -i "s/^puma\['worker_processes'\].*/puma['worker_processes'] = 0/" /etc/gitlab/gitlab.rb
              #sed -i "s/^prometheus_monitoring\['enable'\].*/prometheus_monitoring['enable'] = false/" /etc/gitlab/gitlab.rb
              #sed -i "s/^sidekiq\['max_concurrency'\].*/sidekiq['max_concurrency'] = 10/" /etc/gitlab/gitlab.rb

              # Reconfigure GitLab to apply changes
              #gitlab-ctl reconfigure

            - {
              UserId: !Ref UserId
            }

      Tags:
        - Key: Name
          Value: !Sub "${PJPrefix}-${Environment}-${ServerKind}-ec2"
        - Key: PJName
          Value: !Ref PJPrefix

# =======================================
# Outputs
# =======================================
Outputs:
  EC2InstanceId:
    Value: !Ref EC2Instance
    Export:
      Name: !Sub "${PJPrefix}-${Environment}-${ServerKind}-EC2InstanceId"

  EC2PublicIP:
    Value: EIPForEC2
    Condition: AssignEIPCondition
    Export:
      Name: !Sub "${PJPrefix}-${Environment}-${ServerKind}-EC2PublicIP"

  KeyPairName:
    Value: !Ref KeyPair
    Export:
      Name: !Sub "${PJPrefix}-${Environment}-${ServerKind}-KeyPairName"
